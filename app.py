import logging
import os
import uuid

import streamlit as st
from langchain_community.document_loaders import Docx2txtLoader, PyPDFLoader
from langchain_core.output_parsers import StrOutputParser
from langchain_core.prompts import PromptTemplate
from langchain_gigachat.chat_models import GigaChat


@st.cache_data
def load_default_prompt():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    """
    with open("default_prompt.txt", "r", encoding="utf-8") as file:
        text = file.read()

    return text


def save_file(file):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.

    Args:
        file: –û–±—ä–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.

    Returns:
        str: –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.
    """
    unique_id = str(uuid.uuid4())
    file_name = f"{unique_id}_{file.name}"
    with open(file_name, "wb") as f:
        f.write(file.getbuffer())
    return file_name


def extract_text_from_file(uploaded_file: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ —Ñ–∞–π–ª–æ–≤ PDF, DOCX.

    Args:
        uploaded_file (str): –ü—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É.

    Returns:
        str: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É,
             –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
             –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤:
        - .pdf: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç PyPDFLoader –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.
        - .docx: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Docx2txtLoader –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ
                 —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.
    """
    try:
        if uploaded_file.endswith(".docx"):
            return Docx2txtLoader(uploaded_file).load()[0].page_content
        elif uploaded_file.endswith(".pdf"):
            return PyPDFLoader(uploaded_file, mode="single").load()[0].page_content
        else:
            logging.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {uploaded_file}")
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {uploaded_file}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {uploaded_file}: {str(e)}")
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {uploaded_file}: {str(e)}")


def get_model(model_name: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ–¥–µ–ª—å GigaChat –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏.

    Args:
        model_name (str): –ò–º—è –º–æ–¥–µ–ª–∏ GigaChat.

    Returns:
        str: –ò–º—è –º–æ–¥–µ–ª–∏ API GigaChat.
    """
    models = {
        "GigaChat-Lite": "GigaChat",
        "GigaChat-Pro": "GigaChat-Pro",
        "GigaChat-Max": "GigaChat-Max",
    }
    return models[model_name]


def main():

    logging.basicConfig(level=logging.INFO)

    st.title("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    document = st.file_uploader(
        "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (PDF/DOCX)", type=["pdf", "docx"]
    )

    default_prompt = load_default_prompt()

    prompt = st.text_area("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞", value=default_prompt, height=400)

    api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GigaChat", type="password")

    model_name = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GigaChat",
        [
            "GigaChat-Lite ‚ö°",
            "GigaChat-Pro ‚ö°‚ö°",
            "GigaChat-Max ‚ö°‚ö°‚ö°",
        ],
        index=0,
    )

    scope = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é API",
        [
            "GIGACHAT_API_PERS (–¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü)",
            "GIGACHAT_API_CORP",
            "GIGACHAT_API_B2B",
        ],
        index=0,
    ).split(" ")[0]

    model = get_model(model_name.split(" ")[0])

    start_button = st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")

    if start_button:
        if document and api_key:
            document_path = save_file(document)

            document_text = extract_text_from_file(document_path)

            template = PromptTemplate.from_template(prompt)

            llm = GigaChat(
                model=model,
                credentials=api_key,
                scope=scope,
                temperature=0,
                verify_ssl_certs=False,
            )

            chain = template | llm | StrOutputParser()

            try:
                result = chain.invoke({"document_text": document_text})
                st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
                st.markdown(result)
            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –û—à–∏–±–∫–∞: {e}")
            finally:
                os.remove(document_path)
        else:
            st.error(
                "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –∏ –≤–≤–µ—Å—Ç–∏ API –∫–ª—é—á"
            )


if __name__ == "__main__":
    main()
